{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "930edbda",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\kevin\\anaconda3\\Lib\\importlib\\__init__.py:90: RuntimeWarning: coroutine 'Server.serve' was never awaited\n",
      "  return _bootstrap._gcd_import(name[level:], package, level)\n",
      "RuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import norm, skewnorm, bootstrap, t\n",
    "import matplotlib.pyplot as plt\n",
    "from random import sample\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data.dataloader import DataLoader\n",
    "from torchvision import datasets, transforms\n",
    "import pandas as pd\n",
    "from scipy.stats.mstats import mquantiles\n",
    "from tqdm import tqdm\n",
    "from PIL import Image\n",
    "import io\n",
    "import warnings\n",
    "from numba import jit\n",
    "import streamlit as st\n",
    "from streamlit_jupyter import StreamlitPatcher, tqdm\n",
    "\n",
    "StreamlitPatcher().jupyter()  # register streamlit with jupyter-compatible wrappers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9d220c4f-14f7-4784-b3c0-16248658dec0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "file = st.file_uploader(\"upload excel file\", type={\"xlxs\"})\n",
    "if file is not None:\n",
    "    df = pd.read_excel(file)\n",
    "else:\n",
    "    df=0\n",
    "st.write(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5faa6d2b-605a-47bc-8c03-c0df31729fbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os    \n",
    "os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ab234fc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "transform = transforms.Compose([transforms.ToTensor(), transforms.Grayscale(num_output_channels=1), transforms.Normalize((0.5,),(0.5,)), transforms.Resize((24,32))]) #au lieu de 480,640"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "80647690-76b5-4893-b200-039c1344f7af",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LeNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(LeNet, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1,16,5,padding='valid')  #  (# of channels in the input image = 1 car image N&B, # of filters = 16, kernel_size = 5 [car 5x5], pas de padding c'est a dire pas de cadre autour des donnees)\n",
    "        self.batchnorm1 = nn.BatchNorm2d(16)\n",
    "        self.act1 =torch.nn.ReLU()\n",
    "#        self.act1 =torch.nn.LeakyReLU(negative_slope=0.1)\n",
    "        self.maxpool1 = nn.MaxPool2d(2)\n",
    "        self.conv2 = nn.Conv2d(16,32,5,padding='valid')\n",
    "        self.batchnorm2 = nn.BatchNorm2d(32)\n",
    "        self.act2 =torch.nn.ReLU()\n",
    "#        self.act2 =torch.nn.LeakyReLU(negative_slope=0.1)\n",
    "        self.maxpool2 = nn.MaxPool2d(2)\n",
    "        self.un = nn.Linear(3*5*32,100)\n",
    "        self.act3 =torch.nn.ReLU()\n",
    "#        self.act3 =torch.nn.LeakyReLU(negative_slope=0.1)\n",
    "        self.deux = nn.Linear(100,3)\n",
    "#        self.dropout = nn.Dropout(0.5)\n",
    "\n",
    "    def forward(self, x):\n",
    "        # YOUR CODE\n",
    "        h = self.maxpool2(self.batchnorm2(self.act2(self.conv2(self.maxpool1(self.batchnorm1(self.act1(self.conv1(x))))))))\n",
    "        h = h.view(-1,3*5*32)  # cf la taille de la sortie de self.fc1\n",
    "#        h = self.dropout(h)\n",
    "        return self.deux(self.act3(self.un(h)))\n",
    "\n",
    "    def num_flat_features(self, x):\n",
    "        size = x.size()[1:]  # all dimensions except the batch dimension\n",
    "        num_features = 1\n",
    "        for s in size:\n",
    "            num_features *= s\n",
    "        return num_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6a990f6c-4076-49b6-8706-45b45365fb7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "model2 = torch.load('model.pth', weights_only=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "dc16c27a-5e24-422d-9734-b91fc24f90fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = pd.read_excel('RI Fregis.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8ebceda7-0b3e-4a13-8bfe-a764890470db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgMAAAGFCAYAAABg2vAPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAIiUlEQVR4nO3dMU4j2xpG0XPpllpy7Nh5pYzHU2E2jIGpVNiSE5IKiCx10HCjDp5eAlfAoXqvNYJPFmVt4ZL+f15eXl4GAJB1M3sAADCXGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAEDc99kDgPkul8vYtm32jDc5Ho/jdDrNngF/BTEAcZfLZSzLMq7X6+wpb3I4HMa6roIA3oEYgLht28b1eh339/djWZbZc15lXddxPp/Htm1iAN6BGADGGGMsyzJub29nzwAm8AIhAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACDu++wBAP/Vuq6zJ7zJ8Xgcp9Np9gz4P2IA2J3Hx8dxc3Mzzufz7ClvcjgcxrqugoAvRwwAu/P09DSen5/H/f39WJZl9pxXWdd1nM/nsW2bGODLEQPAbi3LMm5vb2fPgN3zAiEAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHHfZw8AKFnXdfaENzkej+N0Os2ewQcTAwCf4PHxcdzc3Izz+Tx7ypscDoexrqsg+MuJAYBP8PT0NJ6fn8f9/f1YlmX2nFdZ13Wcz+exbZsY+MuJAYBPtCzLuL29nT0D/ocXCAEgTgwAQJwYAIA4MQAAcWIAAOLEAADEiQEAiBMDABAnBgAgTgwAQJwYAIA4MQAAcQ4VwTu7XC5j27bZM15tXdfZE4DJxAC8o8vlMpZlGdfrdfYUgFcTA/COtm0b1+t1VzfrHx4ext3d3ewZwERiAD7Anm7W+5kA8AIhAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAEOc2QcjeTuuOMcbxeByn02n2DIC/mhiI2Otp3cPhMNZ1FQQAH0gMROzxtO66ruN8Po9t28QAwAcSAzF7Oq0LwOfwAiEAxIkBAIgTAwAQJwYAIE4MAECcGACAODEAAHFiAADixAAAxIkBAIgTAwAQ9yVuE+zxtO6vX7/Gjx8/Zs94tXVdZ0/4z/a0fU9b4bX29ne9t+/nMeafa58eA3s9rfvt27fx+/fv2TP+ao+Pj+Pm5macz+fZUyBpr8/gHr+fZ59rnx4Dezyt+/DwMO7u7na5eU+enp7G8/Ozzxkm2fMzuKfNX+Fc+/QY+GNPp3X//Mtsj5v3yOcMc+3xGdzT5q/AC4QAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABA3PfZA/5Y13X2hFf7+fPnGMPmj2bz57D5c9j8Ofa4+Sts/efl5eVl9ggAYB4/EwBAnBgAgDgxAABxYgAA4sQAAMSJAQCIEwMAECcGACBODABA3L8F8zuJHbIr5wAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hist=[]\n",
    "for i in range(df.shape[1]):\n",
    "    fig=plt.hist(df[df.columns[i]], edgecolor = \"black\", color=\"white\")\n",
    "    plt.axis('off')\n",
    "    img_buf = io.BytesIO()\n",
    "    plt.savefig(img_buf, format='jpg')\n",
    "    hist.append(Image.open(img_buf))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6d236bac-1e93-48d4-ae36-83c7903295a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x2000 with 7 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=1, ncols=len(hist))\n",
    "for i in range(len(hist)):\n",
    "    axes[i].imshow(hist[i])\n",
    "    axes[i].set_title(f\"{df.columns[i]}\")\n",
    "    axes[i].set_xticks([])\n",
    "    axes[i].set_yticks([])\n",
    "fig.set_size_inches(20, 20)\n",
    "fig.tight_layout()\n",
    "\n",
    "st.pyplot(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2e46d966-99c6-4381-bb2f-84cb46b37a49",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MyDataset(torch.utils.data.Dataset):\n",
    "    def __init__(self, img_list, transform):\n",
    "        super(MyDataset, self).__init__()\n",
    "        self.img_list = img_list\n",
    "        self.transform = transform\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.img_list)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img = self.img_list[idx]\n",
    "        return self.transform(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0a821501-3e24-4a13-9596-a4d7ab0463be",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset=MyDataset(hist, transform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "52932d41-37db-4065-9263-28be83938e0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "loader = DataLoader(dataset,batch_size=len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "40a20e8f-aa28-4689-90a8-fcb8c3f05337",
   "metadata": {},
   "outputs": [],
   "source": [
    "keys={0:\"Gaussian\", 1:\"Left-skewed\", 2:\"Lognormal\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "19099560-04cd-4a8a-be18-a5eacaf7d76a",
   "metadata": {},
   "outputs": [],
   "source": [
    "refZ = norm.ppf(1 - ((1 - 0.95)/2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "03c098c5-262c-499c-b774-0c3341ec1e71",
   "metadata": {},
   "outputs": [],
   "source": [
    "def robust(data, indices=None, refConf=0.95):\n",
    "    if indices is None:\n",
    "        indices = range(len(data))\n",
    "    data = np.sort(data[indices])\n",
    "    n = len(data)\n",
    "    median = np.nanmedian(data)\n",
    "    Tbi = median\n",
    "    TbiNew = 10000\n",
    "    c = 3.7\n",
    "    MAD = np.nanmedian(np.abs(data - median)) / 0.6745\n",
    "    smallDiff = False\n",
    "    while not smallDiff:\n",
    "        ui = (data - Tbi) / (c * MAD)\n",
    "        ui[ui < -1] = 1\n",
    "        ui[ui > 1] = 1\n",
    "        wi = (1 - ui**2)**2\n",
    "        TbiNew = np.sum(data * wi) / np.sum(wi)\n",
    "        if not np.isfinite(TbiNew) or np.abs(TbiNew - Tbi) < 0.000001:\n",
    "            break\n",
    "        Tbi = TbiNew\n",
    "    ui = (data - median) / (205.6 * MAD)\n",
    "    sbi205_6 = 205.6 * MAD * np.sqrt((n * np.sum(((1 - ui[(ui > -1) & (ui < 1)]**2)**4) * ui[(ui > -1) & (ui < 1)]**2)) /\n",
    "                                     (np.sum((1 - ui[(ui > -1) & (ui < 1)]**2) * (1 - 5 * ui[(ui > -1) & (ui < 1)]**2)) *\n",
    "                                      max(1, -1 + np.sum((1 - ui[(ui > -1) & (ui < 1)]**2) * (1 - 5 * ui[(ui > -1) & (ui < 1)]**2)))))\n",
    "\n",
    "    ui = (data - median) / (3.7 * MAD)\n",
    "    sbi3_7 = 3.7 * MAD * np.sqrt((n * np.sum(((1 - ui[(ui > -1) & (ui < 1)]**2)**4) * ui[(ui > -1) & (ui < 1)]**2)) /\n",
    "                                 (np.sum((1 - ui[(ui > -1) & (ui < 1)]**2) * (1 - 5 * ui[(ui > -1) & (ui < 1)]**2)) *\n",
    "                                  max(1, -1 + np.sum((1 - ui[(ui > -1) & (ui < 1)]**2) * (1 - 5 * ui[(ui > -1) & (ui < 1)]**2)))))\n",
    "\n",
    "    ui = (data - Tbi) / (3.7 * sbi3_7)\n",
    "    St3_7 = 3.7 * sbi3_7 * np.sqrt((np.sum(((1 - ui[(ui > -1) & (ui < 1)]**2)**4) * ui[(ui > -1) & (ui < 1)]**2)) /\n",
    "                                   (np.sum((1 - ui[(ui > -1) & (ui < 1)]**2) * (1 - 5 * ui[(ui > -1) & (ui < 1)]**2)) *\n",
    "                                    max(1, -1 + np.sum((1 - ui[(ui > -1) & (ui < 1)]**2) * (1 - 5 * ui[(ui > -1) & (ui < 1)]**2)))))\n",
    "\n",
    "    t_statistic = t.ppf(1 - (1 - refConf) / 2, n - 1)\n",
    "    margin = t_statistic * np.sqrt(sbi205_6**2 + St3_7**2)\n",
    "    robust_lower = Tbi - margin\n",
    "    robust_upper = Tbi + margin\n",
    "    ref_interval = (robust_lower, robust_upper)\n",
    "\n",
    "    return ref_interval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1027a7d1-6769-4aeb-a7ce-6eee4fc86228",
   "metadata": {},
   "outputs": [],
   "source": [
    "@jit(nopython=True)\n",
    "def bootstrap_quantiles(data, iterations, quantile):\n",
    "    sample_size = len(data)\n",
    "    quantiles = np.zeros(iterations)\n",
    "    for i in range(iterations):\n",
    "        sample = np.random.choice(data, size=sample_size, replace=True)\n",
    "        quantiles[i] = np.quantile(sample, quantile)\n",
    "    return quantiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "03580e34-7d95-4035-99d2-e58a69f6b4ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "pH:  Gaussian:  [7.319 - 7.500];   90% confidence interval: [7.302-7.335 ; 7.480-7.515]"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "HCO3-:  Gaussian:  [15.128 - 26.858];   90% confidence interval: [14.102-16.499 ; 25.855-27.862]"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "pCO2:  Gaussian:  [22.574 - 47.997];   90% confidence interval: [20.593-24.887 ; 44.747-50.898]"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "Sodium:  Gaussian:  [136.977 - 146.166];   90% confidence interval: [135.977-137.904 ; 145.388-146.816]"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "Potassium:  Lognormal:  [3.643 - 4.862];   90% confidence interval: [3.600-3.742 ; 4.800-5.000]"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "Chloride:  Lognormal:  [107.850 - 120.625];   90% confidence interval: [107.000-110.000 ; 118.250-124.000]"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "iCa:  Gaussian:  [1.177 - 1.427];   90% confidence interval: [1.148-1.201 ; 1.407-1.445]"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "warnings.filterwarnings('ignore') \n",
    "for images in loader:\n",
    "    pred = model2(images)\n",
    "    result=pred.argmax(-1)\n",
    "    lower=np.zeros(result.size(dim=0))\n",
    "    upper=np.zeros(result.size(dim=0))\n",
    "    lower90_low=np.zeros(result.size(dim=0))\n",
    "    upper90_low=np.zeros(result.size(dim=0))\n",
    "    lower90_up=np.zeros(result.size(dim=0))\n",
    "    upper90_up=np.zeros(result.size(dim=0))\n",
    "    for i in range(result.size(dim=0)):\n",
    "        if result[i].item()==0:\n",
    "            lower[i]=np.nanmean(df.values[:,i]) - refZ * np.nanstd(df.values[:,i])\n",
    "            upper[i]=np.nanmean(df.values[:,i]) + refZ * np.nanstd(df.values[:,i])\n",
    "            btlower=np.zeros(200)\n",
    "            btupper=np.zeros(200)\n",
    "            for f in range(200):\n",
    "                sample_data = np.random.choice(df.values[:,i], replace=True, size=len(df.values[:,i]))\n",
    "                btlower[f]=np.nanmean(sample_data) - refZ * np.nanstd(sample_data)\n",
    "                btupper[f]=np.nanmean(sample_data) + refZ * np.nanstd(sample_data)\n",
    "            lower90_low[i]=np.quantile(btlower, 0.05)\n",
    "            lower90_up[i]=np.quantile(btlower, 0.95)\n",
    "            upper90_low[i]=np.quantile(btupper, 0.05)\n",
    "            upper90_up[i]=np.quantile(btupper, 0.95)\n",
    "        elif result[i].item()==2:\n",
    "            lower[i]=mquantiles(df.values[:,i],prob=(0.025),alphap=0, betap=0)\n",
    "            btnp=np.zeros(10000)\n",
    "            btnp = bootstrap_quantiles(df.values[:,i], 10000, 0.975)\n",
    "            upper[i]=np.nanmedian(btnp)\n",
    "            btlower=np.zeros(200)\n",
    "            btupper=np.zeros(200)\n",
    "#            for f in tqdm(range(200)):\n",
    "            for f in range(200):\n",
    "                sample_data = np.random.choice(df.values[:,i], replace=True, size=len(df.values[:,i]))\n",
    "                btlower[f]=mquantiles(sample_data,prob=(0.025),alphap=0, betap=0)\n",
    "                btnp = bootstrap_quantiles(sample_data, 10000, 0.975)\n",
    "                btupper[f]=np.nanmedian(btnp)\n",
    "            lower90_low[i]=np.quantile(btlower, 0.05)\n",
    "            lower90_up[i]=np.quantile(btlower, 0.95)\n",
    "            upper90_low[i]=np.quantile(btupper, 0.05)\n",
    "            upper90_up[i]=np.quantile(btupper, 0.95)\n",
    "        elif result[i].item()==1:\n",
    "            lower[i]=robust(df.values[:,i])[0]\n",
    "            upper[i]=mquantiles(df.values[:,i],prob=(0.975),alphap=0, betap=0)\n",
    "            btlower=np.zeros(200)\n",
    "            btupper=np.zeros(200)\n",
    "            for f in range(200):\n",
    "                sample_data = np.random.choice(df.values[:,i], replace=True, size=len(df.values[:,i]))\n",
    "                btlower[f]=robust(sample_data)[0]\n",
    "                btupper[f]=mquantiles(sample_data,prob=(0.975),alphap=0, betap=0)\n",
    "            lower90_low[i]=np.quantile(btlower, 0.05)\n",
    "            lower90_up[i]=np.quantile(btlower, 0.95)\n",
    "            upper90_low[i]=np.quantile(btupper, 0.05)\n",
    "            upper90_up[i]=np.quantile(btupper, 0.95)\n",
    "\n",
    "        st.write(f'{df.columns[i]}:  {keys[result[i].item()]}:  [{lower[i]:.3f} - {upper[i]:.3f}];   90% confidence interval: [{lower90_low[i]:.3f}-{lower90_up[i]:.3f} ; {upper90_low[i]:.3f}-{upper90_up[i]:.3f}]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbc38daf-1ac5-46b3-b3a6-a509b91a33e4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be34c697-59cf-4cad-be66-b256a5e3e33e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
